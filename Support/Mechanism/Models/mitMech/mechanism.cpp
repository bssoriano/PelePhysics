#include "mechanism.H"
const int rmap[524] = {
  0,   15,  16,  24,  26,  52,  59,  61,  84,  114, 115, 116, 117, 233, 27,
  40,  41,  92,  136, 11,  25,  31,  56,  57,  58,  64,  134, 166, 229, 258,
  266, 273, 330, 344, 425, 426, 429, 430, 435, 1,   2,   3,   4,   5,   6,
  7,   8,   9,   10,  12,  13,  14,  17,  18,  19,  20,  21,  22,  23,  28,
  29,  30,  32,  33,  34,  35,  36,  37,  38,  39,  42,  43,  44,  45,  46,
  47,  48,  49,  50,  51,  53,  54,  55,  60,  62,  63,  65,  66,  67,  68,
  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
  85,  86,  87,  88,  89,  90,  91,  93,  94,  95,  96,  97,  98,  99,  100,
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119,
  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135,
  137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
  152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167,
  168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
  183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
  198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
  228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
  245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260,
  261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277,
  278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
  293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
  308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
  323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338,
  339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
  355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
  370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
  385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
  400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
  415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433,
  434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
  450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
  465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
  480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
  495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
  510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523};

// Returns 0-based map of reaction order
void
GET_RMAP(int* _rmap)
{
  for (int j = 0; j < 524; ++j) {
    _rmap[j] = rmap[j];
  }
}

// Returns a count of species in a reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void
CKINU(const int i, int& nspec, int ki[], int nu[])
{
  const int ns[524] = {
    3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2,
    3, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4,
    3, 3, 2, 4, 4, 4, 3, 2, 2, 3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 3, 4, 3,
    5, 4, 4, 3, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 3, 4, 4, 3, 3, 3,
    4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 2, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 4, 4, 4, 3, 2, 4, 5, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 4, 5, 4, 4,
    4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 4, 5, 4, 4, 4, 4, 3, 4, 3,
    3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4,
    4, 4, 4, 5, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3,
    3, 3, 3, 5, 3, 3, 5, 5, 5, 4, 2, 3, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3,
    3, 3, 3, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5};
  const int kiv[2620] = {
    10, 0,  11, 0,  0,  11, 0,  10, 1,  0,  11, 4,  10, 5,  0,  11, 2,  10, 4,
    0,  16, 10, 18, 11, 0,  8,  4,  7,  5,  0,  7,  4,  9,  0,  0,  0,  3,  2,
    4,  0,  1,  2,  0,  4,  0,  5,  2,  4,  0,  0,  1,  4,  0,  5,  0,  8,  7,
    0,  0,  0,  13, 4,  5,  12, 0,  13, 4,  5,  12, 0,  17, 2,  10, 8,  0,  17,
    0,  18, 0,  0,  24, 10, 4,  0,  0,  16, 0,  18, 1,  0,  24, 12, 25, 13, 0,
    18, 3,  17, 12, 0,  16, 4,  18, 5,  0,  16, 2,  18, 4,  0,  10, 12, 15, 4,
    0,  7,  12, 9,  4,  0,  10, 16, 0,  0,  0,  5,  0,  4,  0,  0,  0,  3,  12,
    0,  0,  7,  2,  9,  0,  0,  7,  3,  9,  2,  0,  0,  8,  7,  1,  0,  8,  2,
    7,  4,  0,  14, 0,  8,  0,  0,  14, 4,  5,  8,  0,  14, 0,  1,  8,  0,  14,
    2,  8,  4,  0,  10, 4,  14, 1,  0,  10, 2,  14, 0,  0,  10, 3,  15, 2,  0,
    14, 10, 11, 8,  0,  10, 8,  11, 7,  0,  15, 14, 0,  0,  0,  17, 22, 1,  0,
    0,  12, 2,  3,  4,  0,  8,  12, 14, 3,  0,  15, 3,  14, 12, 0,  10, 12, 11,
    3,  0,  8,  3,  7,  12, 0,  0,  12, 4,  0,  0,  0,  12, 1,  3,  0,  12, 4,
    5,  3,  0,  13, 3,  12, 0,  0,  13, 3,  12, 0,  0,  4,  13, 0,  0,  0,  0,
    13, 5,  4,  0,  11, 12, 10, 13, 0,  14, 12, 13, 8,  0,  4,  0,  2,  0,  0,
    3,  2,  0,  0,  0,  1,  0,  0,  0,  0,  23, 0,  17, 0,  0,  23, 18, 17, 0,
    0,  22, 0,  23, 0,  0,  17, 0,  23, 1,  0,  17, 4,  23, 5,  0,  22, 21, 0,
    0,  0,  22, 3,  27, 4,  0,  19, 3,  7,  5,  0,  22, 4,  21, 5,  0,  22, 2,
    21, 4,  0,  22, 2,  19, 7,  0,  21, 3,  7,  8,  0,  21, 2,  20, 7,  0,  19,
    3,  8,  4,  0,  19, 2,  7,  0,  0,  19, 0,  20, 1,  0,  19, 4,  20, 5,  0,
    19, 3,  9,  0,  0,  20, 3,  8,  2,  0,  24, 4,  25, 5,  0,  24, 0,  15, 1,
    0,  24, 0,  25, 1,  0,  10, 24, 25, 11, 0,  24, 2,  25, 4,  0,  25, 3,  14,
    12, 0,  25, 14, 0,  0,  0,  23, 3,  22, 12, 0,  13, 2,  12, 4,  0,  22, 2,
    0,  27, 0,  22, 4,  26, 0,  0,  26, 0,  10, 7,  0,  26, 2,  19, 9,  0,  19,
    3,  14, 2,  0,  26, 19, 7,  0,  0,  26, 2,  27, 4,  0,  26, 4,  5,  27, 0,
    26, 0,  1,  27, 0,  27, 4,  8,  0,  0,  0,  27, 62, 7,  0,  27, 2,  7,  0,
    0,  16, 3,  18, 12, 0,  16, 12, 18, 13, 0,  19, 3,  9,  1,  0,  23, 10, 22,
    11, 0,  18, 10, 17, 11, 0,  14, 24, 15, 0,  0,  14, 15, 24, 8,  0,  15, 11,
    10, 24, 0,  16, 15, 18, 24, 0,  23, 0,  22, 1,  0,  15, 24, 25, 24, 0,  24,
    4,  15, 5,  0,  18, 0,  10, 0,  0,  23, 3,  14, 8,  0,  16, 18, 0,  0,  0,
    28, 25, 10, 0,  0,  28, 18, 4,  0,  0,  28, 17, 5,  0,  0,  28, 33, 1,  0,
    0,  28, 3,  12, 29, 0,  28, 3,  12, 30, 0,  28, 4,  5,  29, 0,  28, 4,  5,
    30, 0,  28, 0,  1,  29, 0,  28, 0,  1,  30, 0,  28, 12, 13, 29, 0,  28, 12,
    13, 30, 0,  28, 12, 50, 13, 0,  28, 2,  4,  29, 0,  28, 2,  4,  30, 0,  28,
    10, 11, 29, 0,  28, 10, 11, 30, 0,  18, 28, 16, 29, 0,  18, 28, 16, 30, 0,
    29, 17, 4,  0,  0,  30, 33, 0,  0,  0,  17, 10, 23, 11, 0,  31, 10, 7,  0,
    0,  33, 10, 8,  0,  0,  33, 3,  31, 12, 0,  33, 4,  31, 5,  0,  33, 0,  31,
    1,  0,  33, 2,  31, 4,  0,  33, 12, 31, 13, 0,  10, 33, 31, 11, 0,  58, 22,
    10, 0,  0,  22, 10, 35, 0,  0,  57, 22, 10, 0,  0,  36, 23, 10, 0,  0,  22,
    10, 34, 0,  0,  36, 57, 0,  0,  0,  36, 2,  26, 10, 0,  36, 2,  18, 8,  0,
    36, 2,  67, 0,  0,  36, 58, 0,  0,  0,  36, 12, 57, 13, 0,  36, 12, 58, 13,
    0,  36, 12, 59, 13, 0,  36, 4,  57, 5,  0,  36, 4,  58, 5,  0,  37, 23, 0,
    0,  0,  37, 4,  18, 26, 0,  37, 4,  57, 14, 0,  37, 4,  23, 33, 0,  37, 2,
    17, 26, 0,  37, 2,  34, 14, 0,  17, 3,  23, 12, 0,  14, 7,  1,  0,  0,  17,
    15, 23, 24, 0,  36, 4,  59, 5,  0,  36, 2,  57, 4,  0,  36, 2,  58, 4,  0,
    36, 2,  59, 4,  0,  36, 0,  57, 1,  0,  36, 3,  58, 12, 0,  36, 0,  17, 10,
    0,  47, 38, 10, 0,  0,  48, 38, 10, 0,  0,  44, 17, 57, 0,  0,  44, 37, 10,
    0,  0,  38, 37, 0,  0,  0,  38, 23, 17, 0,  0,  36, 38, 57, 39, 0,  37, 40,
    38, 0,  0,  37, 39, 38, 0,  0,  38, 10, 37, 11, 0,  57, 38, 36, 37, 0,  38,
    3,  37, 12, 0,  38, 0,  37, 1,  0,  18, 38, 16, 37, 0,  18, 38, 17, 40, 0,
    18, 38, 17, 39, 0,  23, 38, 17, 37, 0,  39, 38, 0,  0,  0,  39, 10, 38, 11,
    0,  39, 0,  38, 1,  0,  39, 4,  18, 33, 0,  39, 4,  38, 5,  0,  39, 2,  17,
    33, 0,  39, 12, 38, 13, 0,  39, 3,  38, 12, 0,  40, 57, 10, 0,  0,  40, 23,
    18, 0,  0,  40, 38, 0,  0,  0,  40, 10, 38, 11, 0,  40, 0,  38, 1,  0,  40,
    4,  38, 5,  0,  57, 40, 36, 38, 0,  40, 12, 38, 13, 0,  40, 3,  38, 12, 0,
    41, 26, 10, 0,  0,  43, 18, 7,  0,  0,  42, 0,  43, 1,  0,  42, 2,  43, 4,
    0,  42, 4,  43, 5,  0,  42, 10, 43, 11, 0,  42, 12, 43, 13, 0,  42, 15, 43,
    24, 0,  18, 42, 43, 16, 0,  42, 18, 8,  0,  0,  42, 3,  43, 12, 0,  23, 42,
    17, 43, 0,  42, 57, 43, 36, 0,  45, 18, 57, 0,  0,  45, 0,  44, 1,  0,  45,
    2,  44, 4,  0,  45, 4,  44, 5,  0,  45, 10, 44, 11, 0,  0,  13, 1,  12, 0,
    8,  2,  9,  0,  0,  10, 19, 0,  0,  0,  10, 0,  19, 1,  0,  10, 4,  19, 5,
    0,  20, 11, 17, 0,  0,  24, 25, 0,  0,  0,  31, 0,  26, 1,  0,  31, 2,  26,
    4,  0,  10, 31, 26, 11, 0,  17, 2,  32, 0,  0,  18, 2,  33, 0,  0,  16, 20,
    18, 19, 0,  14, 25, 24, 8,  0,  36, 3,  59, 12, 0,  23, 17, 37, 0,  0,  47,
    4,  5,  49, 0,  48, 4,  5,  49, 0,  47, 0,  1,  49, 0,  48, 0,  1,  49, 0,
    47, 10, 11, 49, 0,  48, 10, 11, 49, 0,  47, 2,  49, 4,  0,  48, 2,  49, 4,
    0,  46, 2,  36, 33, 0,  49, 18, 34, 0,  0,  46, 38, 10, 0,  0,  46, 0,  44,
    1,  0,  46, 2,  44, 4,  0,  46, 4,  44, 5,  0,  46, 10, 44, 11, 0,  50, 14,
    10, 0,  0,  28, 4,  50, 5,  0,  28, 0,  50, 1,  0,  28, 2,  50, 4,  0,  28,
    10, 50, 11, 0,  3,  30, 33, 12, 0,  50, 3,  33, 12, 0,  23, 3,  32, 2,  0,
    51, 10, 3,  0,  0,  61, 3,  7,  0,  27, 18, 12, 50, 4,  0,  10, 51, 15, 0,
    0,  18, 51, 50, 15, 0,  51, 14, 24, 3,  0,  51, 15, 3,  0,  0,  50, 33, 0,
    0,  0,  53, 23, 7,  0,  0,  54, 4,  53, 5,  0,  54, 0,  53, 1,  0,  54, 2,
    53, 4,  0,  54, 12, 53, 13, 0,  54, 10, 53, 11, 0,  55, 54, 0,  0,  0,  55,
    23, 14, 0,  0,  55, 3,  54, 12, 0,  57, 12, 55, 4,  0,  57, 51, 55, 15, 0,
    17, 51, 52, 15, 0,  52, 10, 8,  0,  0,  52, 33, 0,  0,  0,  10, 4,  62, 5,
    0,  24, 3,  25, 12, 0,  56, 23, 33, 0,  0,  56, 54, 10, 0,  0,  38, 12, 56,
    4,  0,  38, 51, 56, 15, 0,  40, 2,  36, 14, 0,  40, 2,  17, 33, 0,  40, 2,
    18, 31, 0,  40, 4,  18, 33, 0,  40, 4,  16, 31, 0,  40, 2,  42, 19, 0,  40,
    2,  43, 10, 0,  40, 4,  42, 10, 0,  40, 4,  43, 11, 0,  42, 50, 43, 28, 0,
    42, 38, 43, 40, 0,  42, 38, 43, 39, 0,  34, 12, 17, 7,  4,  34, 12, 60, 13,
    0,  33, 4,  10, 78, 0,  59, 3,  34, 12, 0,  36, 3,  57, 12, 0,  36, 10, 57,
    11, 0,  36, 10, 58, 11, 0,  36, 10, 59, 11, 0,  18, 36, 16, 57, 0,  59, 22,
    10, 0,  0,  57, 12, 23, 14, 4,  57, 0,  34, 1,  0,  57, 10, 34, 11, 0,  18,
    57, 16, 34, 0,  18, 57, 17, 36, 0,  23, 57, 17, 34, 0,  34, 36, 57, 0,  0,
    57, 3,  54, 4,  0,  58, 3,  33, 8,  0,  58, 0,  34, 1,  0,  58, 10, 34, 11,
    0,  59, 3,  41, 2,  0,  59, 0,  35, 1,  0,  59, 10, 35, 11, 0,  34, 60, 0,
    0,  0,  34, 35, 0,  0,  0,  34, 3,  60, 12, 0,  34, 12, 19, 26, 4,  60, 0,
    61, 1,  0,  34, 4,  60, 5,  0,  34, 2,  17, 7,  0,  61, 4,  22, 8,  0,  57,
    34, 0,  0,  0,  59, 34, 0,  0,  0,  34, 0,  60, 1,  0,  34, 10, 60, 11, 0,
    34, 57, 60, 36, 0,  21, 34, 22, 60, 0,  35, 60, 0,  0,  0,  35, 21, 10, 0,
    0,  35, 3,  60, 12, 0,  35, 12, 17, 7,  4,  35, 4,  60, 5,  0,  35, 2,  60,
    4,  0,  35, 2,  23, 8,  0,  35, 2,  10, 27, 0,  59, 35, 0,  0,  0,  58, 35,
    0,  0,  0,  35, 0,  60, 1,  0,  35, 10, 60, 11, 0,  21, 35, 22, 60, 0,  23,
    35, 17, 60, 0,  35, 57, 60, 36, 0,  60, 2,  21, 14, 0,  60, 4,  61, 5,  0,
    60, 3,  26, 8,  0,  60, 10, 21, 18, 0,  32, 26, 0,  0,  0,  32, 3,  14, 7,
    4,  57, 3,  34, 12, 0,  57, 3,  32, 14, 0,  57, 3,  22, 14, 4,  27, 3,  9,
    8,  0,  36, 0,  58, 1,  0,  26, 4,  25, 7,  0,  10, 3,  14, 4,  0,  17, 1,
    10, 0,  0,  59, 3,  14, 31, 0,  63, 0,  64, 0,  0,  64, 59, 4,  0,  0,  36,
    0,  59, 1,  0,  36, 59, 0,  0,  0,  17, 12, 52, 4,  0,  65, 3,  12, 66, 0,
    65, 4,  5,  66, 0,  0,  65, 1,  66, 0,  65, 2,  66, 4,  0,  12, 65, 13, 66,
    0,  10, 65, 11, 66, 0,  15, 65, 24, 66, 0,  65, 4,  71, 5,  0,  65, 4,  69,
    5,  0,  65, 4,  68, 5,  0,  12, 65, 71, 13, 0,  12, 65, 69, 13, 0,  12, 65,
    68, 13, 0,  67, 4,  18, 9,  0,  67, 4,  7,  30, 0,  67, 0,  18, 7,  0,  67,
    2,  33, 7,  0,  70, 12, 42, 3,  0,  70, 54, 0,  0,  0,  70, 67, 0,  0,  0,
    70, 1,  42, 0,  0,  42, 12, 70, 13, 0,  70, 3,  67, 12, 0,  70, 3,  54, 12,
    0,  70, 3,  33, 7,  4,  68, 54, 10, 0,  0,  69, 36, 8,  0,  0,  71, 17, 32,
    0,  0,  72, 3,  12, 73, 0,  72, 4,  5,  73, 0,  0,  72, 1,  73, 0,  72, 2,
    73, 4,  0,  12, 72, 13, 73, 0,  10, 72, 11, 73, 0,  15, 72, 24, 73, 0,  72,
    4,  74, 5,  0,  72, 4,  75, 5,  0,  72, 4,  76, 5,  0,  12, 72, 74, 13, 0,
    12, 72, 75, 13, 0,  12, 72, 76, 13, 0,  74, 36, 32, 0,  0,  75, 40, 8,  0,
    0,  76, 54, 18, 0,  0,  77, 14, 4,  0,  0,  77, 0,  78, 0,  0,  78, 7,  5,
    0,  0,  78, 9,  1,  0,  0,  78, 8,  4,  0,  0,  78, 4,  9,  0,  5,  78, 7,
    5,  0,  0,  78, 9,  1,  0,  0,  0,  78, 7,  1,  4,  10, 78, 11, 7,  4,  12,
    78, 7,  13, 4,  78, 2,  7,  4,  0,  62, 19, 0,  0,  0,  62, 11, 10, 0,  0,
    16, 62, 18, 10, 0,  62, 3,  7,  0,  4,  62, 1,  10, 0,  0,  62, 0,  20, 1,
    0,  62, 2,  7,  0,  0,  62, 4,  14, 0,  0,  62, 9,  14, 7,  0,  62, 10, 17,
    0,  0,  62, 26, 17, 7,  0,  79, 4,  80, 5,  0,  79, 0,  80, 1,  0,  79, 10,
    80, 11, 0,  79, 2,  80, 4,  0,  80, 57, 36, 0,  0,  80, 23, 40, 0,  0,  80,
    17, 38, 0,  0,  81, 82, 0,  0,  0,  81, 83, 0,  0,  0,  81, 84, 0,  0,  0,
    81, 85, 0,  0,  0,  0,  81, 82, 1,  0,  0,  81, 83, 1,  0,  0,  81, 84, 1,
    0,  0,  81, 85, 1,  0,  81, 2,  82, 4,  0,  81, 2,  83, 4,  0,  81, 2,  84,
    4,  0,  81, 2,  85, 4,  0,  81, 4,  82, 5,  0,  81, 4,  83, 5,  0,  81, 4,
    84, 5,  0,  81, 4,  85, 5,  0,  12, 81, 82, 13, 0,  12, 81, 83, 13, 0,  12,
    81, 84, 13, 0,  12, 81, 85, 13, 0,  10, 81, 82, 11, 0,  10, 81, 83, 11, 0,
    10, 81, 84, 11, 0,  10, 81, 85, 11, 0,  81, 3,  82, 12, 0,  81, 3,  83, 12,
    0,  81, 3,  84, 12, 0,  81, 3,  85, 12, 0,  18, 81, 16, 82, 0,  18, 81, 16,
    83, 0,  18, 81, 16, 84, 0,  18, 81, 16, 85, 0,  15, 81, 82, 24, 0,  15, 81,
    83, 24, 0,  15, 81, 84, 24, 0,  15, 81, 85, 24, 0,  23, 81, 17, 82, 0,  23,
    81, 17, 83, 0,  23, 81, 17, 84, 0,  23, 81, 17, 85, 0,  82, 81, 83, 81, 0,
    82, 81, 84, 81, 0,  82, 81, 85, 81, 0,  83, 81, 84, 81, 0,  83, 81, 85, 81,
    0,  84, 81, 85, 81, 0,  83, 86, 0,  0,  0,  84, 79, 10, 0,  0,  84, 86, 0,
    0,  0,  85, 18, 45, 0,  0,  83, 3,  86, 12, 0,  84, 3,  86, 12, 0,  82, 84,
    0,  0,  0,  82, 85, 0,  0,  0,  83, 84, 0,  0,  0,  82, 83, 0,  0,  0,  86,
    4,  87, 5,  0,  86, 0,  87, 1,  0,  86, 10, 87, 11, 0,  86, 2,  87, 4,  0,
    86, 2,  45, 33, 0,  87, 57, 40, 0,  0,  87, 36, 38, 0,  0,  88, 4,  79, 5,
    8,  89, 4,  45, 31, 5,  88, 4,  17, 5,  73, 89, 4,  36, 5,  66, 88, 12, 79,
    13, 8,  89, 12, 45, 31, 13, 88, 12, 17, 13, 73, 89, 12, 36, 13, 66};
  const int nuv[2620] = {
    -1, -1, 1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -2, 1,  0, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 2, 0, 0,
    -2, 1,  0, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 2,  0, 0, 0, -1, 2,  0, 0, 0, -1, -1, 1, 0, 0,
    -1, -1, 2, 0, 0, -1, -1, 1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 2, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 2, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, -1, 2, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, 0,
    -1, -1, 1, 2, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 2,  0, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 2, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 1,
    -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -2, 1,  1, 1, 0,
    -2, 2,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  0, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 1, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 2, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  0, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 1,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 1, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 1,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 1,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 1, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 1,
    -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 2, 0, -1, 1,  0, 0, 0,
    -1, -1, 2, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 2, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0,
    -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, 1,  0, 0, 0, -1, 1,  0, 0, 0, -1, 1,  0, 0, 0,
    -1, 1,  0, 0, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, -1, 1, 1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1, 1, 0, -1, 1,  1, 0, 0, -1, 1,  1, 0, 0,
    -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1,
    -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1};
  if (i < 1) {
    // Return max num species per reaction
    nspec = 5;
  } else {
    if (i > 524) {
      nspec = -1;
    } else {
      nspec = ns[i - 1];
      for (int j = 0; j < nspec; ++j) {
        ki[j] = kiv[(i - 1) * 5 + j] + 1;
        nu[j] = nuv[(i - 1) * 5 + j];
      }
    }
  }
}

// Returns the progress rates of each reactions
// Given P, T, and mole fractions
void
CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real q_f[],
  amrex::Real q_r[])
{
  amrex::Real c[90]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 90; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  progressRateFR(q_f, q_r, c, T);

  // convert to chemkin units
  for (int id = 0; id < 524; ++id) {
    q_f[id] *= 1.0e-6;
    q_r[id] *= 1.0e-6;
  }
}

// compute the progress rate for each reaction
// USES progressRate : todo switch to GPU
void
progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  // compute the Gibbs free energy
  amrex::Real g_RT[90];
  gibbs(g_RT, tc);

  amrex::Real sc_qss[1];
  comp_qfqr(q_f, q_r, sc, sc_qss, tc, invT);
}

// save atomic weights into array
void
atomicWeight(amrex::Real* awt)
{
  awt[0] = 1.008000;    // H
  awt[1] = 2.014000;    // D
  awt[2] = 3.016000;    // T
  awt[3] = 12.011000;   // C
  awt[4] = 13.003000;   // Ci
  awt[5] = 15.999000;   // O
  awt[6] = 17.999000;   // Oi
  awt[7] = 14.007000;   // N
  awt[8] = 20.179700;   // Ne
  awt[9] = 39.950000;   // Ar
  awt[10] = 4.002602;   // He
  awt[11] = 28.085000;  // Si
  awt[12] = 32.060000;  // S
  awt[13] = 18.998403;  // F
  awt[14] = 35.450000;  // Cl
  awt[15] = 79.904000;  // Br
  awt[16] = 126.904470; // I
  awt[17] = 195.083000; // X
}

// get atomic weight for all elements
void
CKAWT(amrex::Real* awt)
{
  atomicWeight(awt);
}

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void
CKNCF(int* ncf)
{
  int kd = 18;
  // Zero ncf
  for (int id = 0; id < kd * 90; ++id) {
    ncf[id] = 0;
  }

  // h
  ncf[0 * kd + 0] = 1; // H

  // h2
  ncf[1 * kd + 0] = 2; // H

  // o
  ncf[2 * kd + 5] = 1; // O

  // o2
  ncf[3 * kd + 5] = 2; // O

  // oh
  ncf[4 * kd + 0] = 1; // H
  ncf[4 * kd + 5] = 1; // O

  // h2o
  ncf[5 * kd + 0] = 2; // H
  ncf[5 * kd + 5] = 1; // O

  // n2
  ncf[6 * kd + 7] = 2; // N

  // co
  ncf[7 * kd + 3] = 1; // C
  ncf[7 * kd + 5] = 1; // O

  // hco
  ncf[8 * kd + 3] = 1; // C
  ncf[8 * kd + 0] = 1; // H
  ncf[8 * kd + 5] = 1; // O

  // co2
  ncf[9 * kd + 3] = 1; // C
  ncf[9 * kd + 5] = 2; // O

  // ch3
  ncf[10 * kd + 3] = 1; // C
  ncf[10 * kd + 0] = 3; // H

  // ch4
  ncf[11 * kd + 3] = 1; // C
  ncf[11 * kd + 0] = 4; // H

  // ho2
  ncf[12 * kd + 0] = 1; // H
  ncf[12 * kd + 5] = 2; // O

  // h2o2
  ncf[13 * kd + 0] = 2; // H
  ncf[13 * kd + 5] = 2; // O

  // ch2o
  ncf[14 * kd + 3] = 1; // C
  ncf[14 * kd + 0] = 2; // H
  ncf[14 * kd + 5] = 1; // O

  // ch3o
  ncf[15 * kd + 3] = 1; // C
  ncf[15 * kd + 0] = 3; // H
  ncf[15 * kd + 5] = 1; // O

  // c2h6
  ncf[16 * kd + 3] = 2; // C
  ncf[16 * kd + 0] = 6; // H

  // c2h4
  ncf[17 * kd + 3] = 2; // C
  ncf[17 * kd + 0] = 4; // H

  // c2h5
  ncf[18 * kd + 3] = 2; // C
  ncf[18 * kd + 0] = 5; // H

  // ch2
  ncf[19 * kd + 3] = 1; // C
  ncf[19 * kd + 0] = 2; // H

  // ch
  ncf[20 * kd + 3] = 1; // C
  ncf[20 * kd + 0] = 1; // H

  // c2h
  ncf[21 * kd + 3] = 2; // C
  ncf[21 * kd + 0] = 1; // H

  // c2h2
  ncf[22 * kd + 3] = 2; // C
  ncf[22 * kd + 0] = 2; // H

  // c2h3
  ncf[23 * kd + 3] = 2; // C
  ncf[23 * kd + 0] = 3; // H

  // ch3oh
  ncf[24 * kd + 3] = 1; // C
  ncf[24 * kd + 0] = 4; // H
  ncf[24 * kd + 5] = 1; // O

  // ch2oh
  ncf[25 * kd + 3] = 1; // C
  ncf[25 * kd + 0] = 3; // H
  ncf[25 * kd + 5] = 1; // O

  // ch2co
  ncf[26 * kd + 3] = 2; // C
  ncf[26 * kd + 0] = 2; // H
  ncf[26 * kd + 5] = 1; // O

  // hcco
  ncf[27 * kd + 3] = 2; // C
  ncf[27 * kd + 0] = 1; // H
  ncf[27 * kd + 5] = 1; // O

  // c2h5oh
  ncf[28 * kd + 3] = 2; // C
  ncf[28 * kd + 0] = 6; // H
  ncf[28 * kd + 5] = 1; // O

  // pc2h4oh
  ncf[29 * kd + 3] = 2; // C
  ncf[29 * kd + 0] = 5; // H
  ncf[29 * kd + 5] = 1; // O

  // sc2h4oh
  ncf[30 * kd + 3] = 2; // C
  ncf[30 * kd + 0] = 5; // H
  ncf[30 * kd + 5] = 1; // O

  // ch3co
  ncf[31 * kd + 3] = 2; // C
  ncf[31 * kd + 0] = 3; // H
  ncf[31 * kd + 5] = 1; // O

  // ch2cho
  ncf[32 * kd + 3] = 2; // C
  ncf[32 * kd + 0] = 3; // H
  ncf[32 * kd + 5] = 1; // O

  // ch3cho
  ncf[33 * kd + 3] = 2; // C
  ncf[33 * kd + 0] = 4; // H
  ncf[33 * kd + 5] = 1; // O

  // c3h4-a
  ncf[34 * kd + 3] = 3; // C
  ncf[34 * kd + 0] = 4; // H

  // c3h4-p
  ncf[35 * kd + 3] = 3; // C
  ncf[35 * kd + 0] = 4; // H

  // c3h6
  ncf[36 * kd + 3] = 3; // C
  ncf[36 * kd + 0] = 6; // H

  // c4h6
  ncf[37 * kd + 3] = 4; // C
  ncf[37 * kd + 0] = 6; // H

  // c4h7
  ncf[38 * kd + 3] = 4; // C
  ncf[38 * kd + 0] = 7; // H

  // c4h8-2
  ncf[39 * kd + 3] = 4; // C
  ncf[39 * kd + 0] = 8; // H

  // c4h8-1
  ncf[40 * kd + 3] = 4; // C
  ncf[40 * kd + 0] = 8; // H

  // ch3coch2
  ncf[41 * kd + 3] = 3; // C
  ncf[41 * kd + 0] = 5; // H
  ncf[41 * kd + 5] = 1; // O

  // c2h5cho
  ncf[42 * kd + 3] = 3; // C
  ncf[42 * kd + 0] = 6; // H
  ncf[42 * kd + 5] = 1; // O

  // c2h5co
  ncf[43 * kd + 3] = 3; // C
  ncf[43 * kd + 0] = 5; // H
  ncf[43 * kd + 5] = 1; // O

  // c5h9
  ncf[44 * kd + 3] = 5; // C
  ncf[44 * kd + 0] = 9; // H

  // c5h10-1
  ncf[45 * kd + 3] = 5;  // C
  ncf[45 * kd + 0] = 10; // H

  // c5h10-2
  ncf[46 * kd + 3] = 5;  // C
  ncf[46 * kd + 0] = 10; // H

  // bc5h10
  ncf[47 * kd + 3] = 5;  // C
  ncf[47 * kd + 0] = 10; // H

  // cc5h10
  ncf[48 * kd + 3] = 5;  // C
  ncf[48 * kd + 0] = 10; // H

  // ic5h9
  ncf[49 * kd + 3] = 5; // C
  ncf[49 * kd + 0] = 9; // H

  // c2h5o
  ncf[50 * kd + 3] = 2; // C
  ncf[50 * kd + 0] = 5; // H
  ncf[50 * kd + 5] = 1; // O

  // ch3o2
  ncf[51 * kd + 3] = 1; // C
  ncf[51 * kd + 0] = 3; // H
  ncf[51 * kd + 5] = 2; // O

  // c2h4o1-2
  ncf[52 * kd + 3] = 2; // C
  ncf[52 * kd + 0] = 4; // H
  ncf[52 * kd + 5] = 1; // O

  // c2h3co
  ncf[53 * kd + 3] = 3; // C
  ncf[53 * kd + 0] = 3; // H
  ncf[53 * kd + 5] = 1; // O

  // c2h3cho
  ncf[54 * kd + 3] = 3; // C
  ncf[54 * kd + 0] = 4; // H
  ncf[54 * kd + 5] = 1; // O

  // c3h5o
  ncf[55 * kd + 3] = 3; // C
  ncf[55 * kd + 0] = 5; // H
  ncf[55 * kd + 5] = 1; // O

  // c4h7o
  ncf[56 * kd + 3] = 4; // C
  ncf[56 * kd + 0] = 7; // H
  ncf[56 * kd + 5] = 1; // O

  // c3h5-a
  ncf[57 * kd + 3] = 3; // C
  ncf[57 * kd + 0] = 5; // H

  // c3h5-s
  ncf[58 * kd + 3] = 3; // C
  ncf[58 * kd + 0] = 5; // H

  // c3h5-t
  ncf[59 * kd + 3] = 3; // C
  ncf[59 * kd + 0] = 5; // H

  // c3h3
  ncf[60 * kd + 3] = 3; // C
  ncf[60 * kd + 0] = 3; // H

  // c3h2
  ncf[61 * kd + 3] = 3; // C
  ncf[61 * kd + 0] = 2; // H

  // ch2(s)
  ncf[62 * kd + 3] = 1; // C
  ncf[62 * kd + 0] = 2; // H

  // tc3h6oh
  ncf[63 * kd + 3] = 3; // C
  ncf[63 * kd + 0] = 7; // H
  ncf[63 * kd + 5] = 1; // O

  // ic3h5oh
  ncf[64 * kd + 3] = 3; // C
  ncf[64 * kd + 0] = 6; // H
  ncf[64 * kd + 5] = 1; // O

  // nc3h7cho
  ncf[65 * kd + 3] = 4; // C
  ncf[65 * kd + 0] = 8; // H
  ncf[65 * kd + 5] = 1; // O

  // nc3h7co
  ncf[66 * kd + 3] = 4; // C
  ncf[66 * kd + 0] = 7; // H
  ncf[66 * kd + 5] = 1; // O

  // ch3chco
  ncf[67 * kd + 3] = 3; // C
  ncf[67 * kd + 0] = 4; // H
  ncf[67 * kd + 5] = 1; // O

  // c3h6cho-3
  ncf[68 * kd + 3] = 4; // C
  ncf[68 * kd + 0] = 7; // H
  ncf[68 * kd + 5] = 1; // O

  // c3h6cho-2
  ncf[69 * kd + 3] = 4; // C
  ncf[69 * kd + 0] = 7; // H
  ncf[69 * kd + 5] = 1; // O

  // ch3chcho
  ncf[70 * kd + 3] = 3; // C
  ncf[70 * kd + 0] = 5; // H
  ncf[70 * kd + 5] = 1; // O

  // c3h6cho-1
  ncf[71 * kd + 3] = 4; // C
  ncf[71 * kd + 0] = 7; // H
  ncf[71 * kd + 5] = 1; // O

  // nc4h9cho
  ncf[72 * kd + 3] = 5;  // C
  ncf[72 * kd + 0] = 10; // H
  ncf[72 * kd + 5] = 1;  // O

  // nc4h9co
  ncf[73 * kd + 3] = 5; // C
  ncf[73 * kd + 0] = 9; // H
  ncf[73 * kd + 5] = 1; // O

  // c4h8cho-2
  ncf[74 * kd + 3] = 5; // C
  ncf[74 * kd + 0] = 9; // H
  ncf[74 * kd + 5] = 1; // O

  // c4h8cho-3
  ncf[75 * kd + 3] = 5; // C
  ncf[75 * kd + 0] = 9; // H
  ncf[75 * kd + 5] = 1; // O

  // c4h8cho-4
  ncf[76 * kd + 3] = 5; // C
  ncf[76 * kd + 0] = 9; // H
  ncf[76 * kd + 5] = 1; // O

  // hoch2o
  ncf[77 * kd + 3] = 1; // C
  ncf[77 * kd + 0] = 3; // H
  ncf[77 * kd + 5] = 2; // O

  // hocho
  ncf[78 * kd + 3] = 1; // C
  ncf[78 * kd + 0] = 2; // H
  ncf[78 * kd + 5] = 2; // O

  // c6h12-1
  ncf[79 * kd + 3] = 6;  // C
  ncf[79 * kd + 0] = 12; // H

  // c6h11
  ncf[80 * kd + 3] = 6;  // C
  ncf[80 * kd + 0] = 11; // H

  // nc7h16
  ncf[81 * kd + 3] = 7;  // C
  ncf[81 * kd + 0] = 16; // H

  // c7h15-1
  ncf[82 * kd + 3] = 7;  // C
  ncf[82 * kd + 0] = 15; // H

  // c7h15-2
  ncf[83 * kd + 3] = 7;  // C
  ncf[83 * kd + 0] = 15; // H

  // c7h15-3
  ncf[84 * kd + 3] = 7;  // C
  ncf[84 * kd + 0] = 15; // H

  // c7h15-4
  ncf[85 * kd + 3] = 7;  // C
  ncf[85 * kd + 0] = 15; // H

  // c7h14-2
  ncf[86 * kd + 3] = 7;  // C
  ncf[86 * kd + 0] = 14; // H

  // c7h13
  ncf[87 * kd + 3] = 7;  // C
  ncf[87 * kd + 0] = 13; // H

  // c7h14o1-3
  ncf[88 * kd + 3] = 7;  // C
  ncf[88 * kd + 0] = 14; // H
  ncf[88 * kd + 5] = 1;  // O

  // c7h14o2-4
  ncf[89 * kd + 3] = 7;  // C
  ncf[89 * kd + 0] = 14; // H
  ncf[89 * kd + 5] = 1;  // O
}

// Returns the vector of strings of element names
void
CKSYME_STR(amrex::Vector<std::string>& ename)
{
  ename.resize(18);
  ename[0] = "H";
  ename[1] = "D";
  ename[2] = "T";
  ename[3] = "C";
  ename[4] = "Ci";
  ename[5] = "O";
  ename[6] = "Oi";
  ename[7] = "N";
  ename[8] = "Ne";
  ename[9] = "Ar";
  ename[10] = "He";
  ename[11] = "Si";
  ename[12] = "S";
  ename[13] = "F";
  ename[14] = "Cl";
  ename[15] = "Br";
  ename[16] = "I";
  ename[17] = "X";
}

// Returns the vector of strings of species names
void
CKSYMS_STR(amrex::Vector<std::string>& kname)
{
  kname.resize(90);
  kname[0] = "h";
  kname[1] = "h2";
  kname[2] = "o";
  kname[3] = "o2";
  kname[4] = "oh";
  kname[5] = "h2o";
  kname[6] = "n2";
  kname[7] = "co";
  kname[8] = "hco";
  kname[9] = "co2";
  kname[10] = "ch3";
  kname[11] = "ch4";
  kname[12] = "ho2";
  kname[13] = "h2o2";
  kname[14] = "ch2o";
  kname[15] = "ch3o";
  kname[16] = "c2h6";
  kname[17] = "c2h4";
  kname[18] = "c2h5";
  kname[19] = "ch2";
  kname[20] = "ch";
  kname[21] = "c2h";
  kname[22] = "c2h2";
  kname[23] = "c2h3";
  kname[24] = "ch3oh";
  kname[25] = "ch2oh";
  kname[26] = "ch2co";
  kname[27] = "hcco";
  kname[28] = "c2h5oh";
  kname[29] = "pc2h4oh";
  kname[30] = "sc2h4oh";
  kname[31] = "ch3co";
  kname[32] = "ch2cho";
  kname[33] = "ch3cho";
  kname[34] = "c3h4-a";
  kname[35] = "c3h4-p";
  kname[36] = "c3h6";
  kname[37] = "c4h6";
  kname[38] = "c4h7";
  kname[39] = "c4h8-2";
  kname[40] = "c4h8-1";
  kname[41] = "ch3coch2";
  kname[42] = "c2h5cho";
  kname[43] = "c2h5co";
  kname[44] = "c5h9";
  kname[45] = "c5h10-1";
  kname[46] = "c5h10-2";
  kname[47] = "bc5h10";
  kname[48] = "cc5h10";
  kname[49] = "ic5h9";
  kname[50] = "c2h5o";
  kname[51] = "ch3o2";
  kname[52] = "c2h4o1-2";
  kname[53] = "c2h3co";
  kname[54] = "c2h3cho";
  kname[55] = "c3h5o";
  kname[56] = "c4h7o";
  kname[57] = "c3h5-a";
  kname[58] = "c3h5-s";
  kname[59] = "c3h5-t";
  kname[60] = "c3h3";
  kname[61] = "c3h2";
  kname[62] = "ch2(s)";
  kname[63] = "tc3h6oh";
  kname[64] = "ic3h5oh";
  kname[65] = "nc3h7cho";
  kname[66] = "nc3h7co";
  kname[67] = "ch3chco";
  kname[68] = "c3h6cho-3";
  kname[69] = "c3h6cho-2";
  kname[70] = "ch3chcho";
  kname[71] = "c3h6cho-1";
  kname[72] = "nc4h9cho";
  kname[73] = "nc4h9co";
  kname[74] = "c4h8cho-2";
  kname[75] = "c4h8cho-3";
  kname[76] = "c4h8cho-4";
  kname[77] = "hoch2o";
  kname[78] = "hocho";
  kname[79] = "c6h12-1";
  kname[80] = "c6h11";
  kname[81] = "nc7h16";
  kname[82] = "c7h15-1";
  kname[83] = "c7h15-2";
  kname[84] = "c7h15-3";
  kname[85] = "c7h15-4";
  kname[86] = "c7h14-2";
  kname[87] = "c7h13";
  kname[88] = "c7h14o1-3";
  kname[89] = "c7h14o2-4";
}

// compute the sparsity pattern of the chemistry Jacobian
void
SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 91; k++) {
    for (int l = 0; l < 91; l++) {
      if (Jac[91 * k + l] != 0.0) {
        nJdata_tmp = nJdata_tmp + 1;
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the system Jacobian
void
SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 91; k++) {
    for (int l = 0; l < 91; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[91 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the simplified (for preconditioning) system
// Jacobian
void
SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 91; k++) {
    for (int l = 0; l < 91; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[91 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  nJdata[0] = nJdata_tmp;
}

// compute the sparsity pattern of the chemistry Jacobian in CSC format -- base
// 0
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int nc = 0; nc < NCELLS; nc++) {
    int offset_row = nc * 91;
    int offset_col = nc * 91;
    for (int k = 0; k < 91; k++) {
      for (int l = 0; l < 91; l++) {
        if (Jac[91 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l + offset_row;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
      colPtrs[offset_col + (k + 1)] = nJdata_tmp;
    }
  }
}

// compute the sparsity pattern of the chemistry Jacobian in CSR format -- base
// 0
void
SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtrs[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 91;
      for (int l = 0; l < 91; l++) {
        for (int k = 0; k < 91; k++) {
          if (Jac[91 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 91;
      for (int l = 0; l < 91; l++) {
        for (int k = 0; k < 91; k++) {
          if (Jac[91 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the system Jacobian
// CSR format BASE is user choice
void
SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtr, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 91;
      for (int l = 0; l < 91; l++) {
        for (int k = 0; k < 91; k++) {
          if (k == l) {
            colVals[nJdata_tmp - 1] = l + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[91 * k + l] != 0.0) {
              colVals[nJdata_tmp - 1] = k + 1 + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 91;
      for (int l = 0; l < 91; l++) {
        for (int k = 0; k < 91; k++) {
          if (k == l) {
            colVals[nJdata_tmp] = l + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[91 * k + l] != 0.0) {
              colVals[nJdata_tmp] = k + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// on CPU BASE 0
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int k = 0; k < 91; k++) {
    for (int l = 0; l < 91; l++) {
      if (k == l) {
        rowVals[nJdata_tmp] = l;
        indx[nJdata_tmp] = 91 * k + l;
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[91 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l;
          indx[nJdata_tmp] = 91 * k + l;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
    colPtrs[k + 1] = nJdata_tmp;
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// CSR format BASE is under choice
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base)
{
  amrex::GpuArray<amrex::Real, 8281> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 90> conc = {0.0};
  for (int n = 0; n < 90; n++) {
    conc[n] = 1.0 / 90.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int l = 0; l < 91; l++) {
      for (int k = 0; k < 91; k++) {
        if (k == l) {
          colVals[nJdata_tmp - 1] = l + 1;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[91 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int l = 0; l < 91; l++) {
      for (int k = 0; k < 91; k++) {
        if (k == l) {
          colVals[nJdata_tmp] = l;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[91 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  }
}
