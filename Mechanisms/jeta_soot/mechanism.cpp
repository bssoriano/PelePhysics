#include "mechanism.H"
const int rmap[307] = {
  2,   9,   18,  19,  20,  21,  77,  96,  98,  100, 122, 125, 127, 128, 148,
  170, 192, 193, 211, 262, 276, 292, 296, 91,  65,  80,  99,  104, 177, 194,
  198, 203, 246, 255, 0,   1,   3,   4,   5,   6,   7,   8,   10,  11,  12,
  13,  14,  15,  16,  17,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,
  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,
  62,  63,  64,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  78,
  79,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  92,  93,  94,  95,
  97,  101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
  116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 130, 131, 132, 133, 134,
  135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150,
  151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
  166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182,
  183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201,
  202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218,
  219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249,
  250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266,
  267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282,
  283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299,
  300, 301, 302, 303, 304, 305, 306};

// Returns 0-based map of reaction order
void
GET_RMAP(int* _rmap)
{
  for (int j = 0; j < 307; ++j) {
    _rmap[j] = rmap[j];
  }
}

// Returns a count of species in a reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void
CKINU(const int i, int& nspec, int ki[], int nu[])
{
  const int ns[307] = {
    4,  4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 3, 3, 4, 3, 3, 3,  3, 5, 4,
    4,  4, 3, 2, 3, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4,  4, 4, 4,
    4,  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 2, 3, 3, 4,  4, 4, 4,
    3,  4, 4, 4, 3, 3, 4, 4, 3, 4, 5, 2, 4, 4, 4, 4, 4, 4, 4, 3, 4,  4, 4, 4,
    3,  4, 3, 2, 3, 4, 4, 4, 2, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4,  3, 3, 4,
    4,  4, 3, 3, 4, 2, 4, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  2, 3, 3,
    12, 4, 5, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 3,
    2,  4, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 2, 4, 4, 4, 4, 4, 3, 3,  4, 4, 4,
    3,  3, 2, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 5, 3, 4,  4, 4, 4,
    5,  4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 5,
    4,  4, 4, 4, 4, 5, 3, 4, 5, 4, 3, 4, 4, 4, 4, 3, 4, 4, 2, 4, 10, 4, 3, 4,
    4,  3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 3, 4, 4, 3, 4, 4, 4, 4, 4,  4, 4, 4,
    4,  4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 4, 3, 5, 4, 4, 4, 3, 4};
  const int kiv[3684] = {
    29, 17, 42, 3,  0,  0,  0,  0,  0,  0,  0,  0,  7,  54, 7,  27, 0,  0,  0,
    0,  0,  0,  0,  0,  29, 43, 33, 0,  0,  0,  0,  0,  0,  0,  0,  0,  38, 33,
    20, 39, 0,  0,  0,  0,  0,  0,  0,  0,  41, 2,  20, 6,  0,  0,  0,  0,  0,
    0,  0,  0,  19, 3,  8,  2,  0,  0,  0,  0,  0,  0,  0,  0,  41, 27, 29, 46,
    0,  0,  0,  0,  0,  0,  0,  0,  4,  55, 15, 10, 0,  0,  0,  0,  0,  0,  0,
    0,  33, 17, 3,  27, 0,  0,  0,  0,  0,  0,  0,  0,  29, 4,  14, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  24, 2,  14, 6,  0,  0,  0,  0,  0,  0,  0,  0,  35,
    17, 11, 0,  0,  0,  0,  0,  0,  0,  0,  0,  14, 3,  20, 2,  0,  0,  0,  0,
    0,  0,  0,  0,  39, 54, 39, 27, 0,  0,  0,  0,  0,  0,  0,  0,  43, 2,  29,
    6,  0,  0,  0,  0,  0,  0,  0,  0,  16, 10, 4,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  32, 43, 29, 0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  10, 43, 4,  0,
    0,  0,  0,  0,  0,  0,  0,  33, 17, 37, 0,  0,  0,  0,  0,  0,  0,  0,  0,
    9,  33, 43, 0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  43, 48, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  45, 33, 19, 0,  0,  0,  0,  0,  0,  0,  0,  0,  24, 27,
    41, 33, 2,  0,  0,  0,  0,  0,  0,  0,  20, 17, 41, 37, 0,  0,  0,  0,  0,
    0,  0,  0,  8,  17, 36, 27, 0,  0,  0,  0,  0,  0,  0,  0,  33, 2,  6,  39,
    0,  0,  0,  0,  0,  0,  0,  0,  37, 22, 17, 0,  0,  0,  0,  0,  0,  0,  0,
    0,  34, 5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  13, 6,  32, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  40, 10, 4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  41,
    3,  40, 12, 0,  0,  0,  0,  0,  0,  0,  0,  2,  3,  6,  27, 0,  0,  0,  0,
    0,  0,  0,  0,  29, 43, 41, 0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  17, 6,
    37, 0,  0,  0,  0,  0,  0,  0,  0,  29, 4,  33, 34, 0,  0,  0,  0,  0,  0,
    0,  0,  3,  31, 28, 4,  0,  0,  0,  0,  0,  0,  0,  0,  38, 45, 20, 19, 0,
    0,  0,  0,  0,  0,  0,  0,  38, 3,  20, 27, 0,  0,  0,  0,  0,  0,  0,  0,
    29, 27, 43, 46, 0,  0,  0,  0,  0,  0,  0,  0,  50, 41, 14, 18, 26, 19, 4,
    33, 31, 0,  0,  0,  55, 41, 14, 18, 26, 19, 4,  33, 31, 0,  0,  0,  43, 29,
    30, 33, 0,  0,  0,  0,  0,  0,  0,  0,  41, 4,  29, 10, 0,  0,  0,  0,  0,
    0,  0,  0,  20, 37, 41, 22, 0,  0,  0,  0,  0,  0,  0,  0,  8,  37, 52, 27,
    0,  0,  0,  0,  0,  0,  0,  0,  41, 3,  4,  2,  0,  0,  0,  0,  0,  0,  0,
    0,  37, 27, 46, 17, 0,  0,  0,  0,  0,  0,  0,  0,  43, 27, 28, 33, 0,  0,
    0,  0,  0,  0,  0,  0,  8,  27, 52, 33, 0,  0,  0,  0,  0,  0,  0,  0,  10,
    27, 4,  46, 0,  0,  0,  0,  0,  0,  0,  0,  41, 3,  29, 27, 0,  0,  0,  0,
    0,  0,  0,  0,  37, 3,  17, 27, 0,  0,  0,  0,  0,  0,  0,  0,  52, 17, 36,
    37, 0,  0,  0,  0,  0,  0,  0,  0,  14, 33, 39, 34, 0,  0,  0,  0,  0,  0,
    0,  0,  28, 27, 46, 25, 0,  0,  0,  0,  0,  0,  0,  0,  10, 3,  4,  27, 0,
    0,  0,  0,  0,  0,  0,  0,  33, 55, 15, 39, 0,  0,  0,  0,  0,  0,  0,  0,
    3,  55, 15, 27, 0,  0,  0,  0,  0,  0,  0,  0,  17, 54, 17, 27, 0,  0,  0,
    0,  0,  0,  0,  0,  4,  5,  31, 0,  0,  0,  0,  0,  0,  0,  0,  0,  29, 3,
    4,  6,  0,  0,  0,  0,  0,  0,  0,  0,  17, 48, 28, 25, 0,  0,  0,  0,  0,
    0,  0,  0,  41, 33, 29, 39, 0,  0,  0,  0,  0,  0,  0,  0,  22, 27, 46, 37,
    0,  0,  0,  0,  0,  0,  0,  0,  9,  17, 6,  2,  0,  0,  0,  0,  0,  0,  0,
    0,  33, 39, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  37, 22, 17, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  45, 4,  26, 0,  0,  0,  0,  0,  0,  0,  0,  0,  9,
    41, 30, 33, 0,  0,  0,  0,  0,  0,  0,  0,  28, 3,  25, 27, 0,  0,  0,  0,
    0,  0,  0,  0,  8,  3,  36, 33, 0,  0,  0,  0,  0,  0,  0,  0,  42, 33, 28,
    39, 0,  0,  0,  0,  0,  0,  0,  0,  8,  3,  52, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  37, 27, 46, 17, 0,  0,  0,  0,  0,  0,  0,  0,  27, 55, 15, 46, 0,
    0,  0,  0,  0,  0,  0,  0,  39, 3,  33, 27, 0,  0,  0,  0,  0,  0,  0,  0,
    23, 8,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  29, 20, 18, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  29, 20, 4,  34, 0,  0,  0,  0,  0,  0,  0,  0,  8,  17,
    52, 3,  0,  0,  0,  0,  0,  0,  0,  0,  33, 27, 46, 0,  0,  0,  0,  0,  0,
    0,  0,  0,  47, 17, 12, 37, 0,  0,  0,  0,  0,  0,  0,  0,  5,  27, 28, 4,
    33, 0,  0,  0,  0,  0,  0,  0,  35, 1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  47, 27, 12, 46, 0,  0,  0,  0,  0,  0,  0,  0,  6,  54, 6,  27, 0,  0,
    0,  0,  0,  0,  0,  0,  14, 3,  24, 27, 0,  0,  0,  0,  0,  0,  0,  0,  20,
    33, 41, 39, 0,  0,  0,  0,  0,  0,  0,  0,  37, 55, 15, 22, 0,  0,  0,  0,
    0,  0,  0,  0,  14, 33, 24, 39, 0,  0,  0,  0,  0,  0,  0,  0,  39, 27, 33,
    46, 0,  0,  0,  0,  0,  0,  0,  0,  6,  3,  7,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  38, 4,  20, 10, 0,  0,  0,  0,  0,  0,  0,  0,  9,  27, 33, 25, 0,
    0,  0,  0,  0,  0,  0,  0,  44, 33, 45, 4,  0,  0,  0,  0,  0,  0,  0,  0,
    33, 25, 16, 6,  0,  0,  0,  0,  0,  0,  0,  0,  44, 33, 26, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  14, 3,  5,  27, 0,  0,  0,  0,  0,  0,  0,  0,  41, 33,
    20, 0,  0,  0,  0,  0,  0,  0,  0,  0,  33, 39, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  8,  33, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  26, 17, 44, 37,
    0,  0,  0,  0,  0,  0,  0,  0,  30, 33, 39, 48, 0,  0,  0,  0,  0,  0,  0,
    0,  19, 3,  23, 33, 0,  0,  0,  0,  0,  0,  0,  0,  3,  17, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  49, 33, 13, 6,  0,  0,  0,  0,  0,  0,  0,  0,  43,
    3,  40, 6,  0,  0,  0,  0,  0,  0,  0,  0,  47, 33, 16, 46, 0,  0,  0,  0,
    0,  0,  0,  0,  25, 43, 6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  43, 4,  5,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  20, 3,  12, 4,  0,  0,  0,  0,  0,  0,
    0,  0,  10, 54, 10, 27, 0,  0,  0,  0,  0,  0,  0,  0,  14, 27, 46, 34, 0,
    0,  0,  0,  0,  0,  0,  0,  28, 33, 39, 25, 0,  0,  0,  0,  0,  0,  0,  0,
    38, 27, 20, 46, 0,  0,  0,  0,  0,  0,  0,  0,  47, 33, 4,  27, 0,  0,  0,
    0,  0,  0,  0,  0,  47, 33, 12, 39, 0,  0,  0,  0,  0,  0,  0,  0,  43, 4,
    34, 0,  0,  0,  0,  0,  0,  0,  0,  0,  44, 43, 8,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  4,  25, 41, 6,  0,  0,  0,  0,  0,  0,  0,  0,  14, 3,  27, 34,
    0,  0,  0,  0,  0,  0,  0,  0,  3,  32, 43, 42, 0,  0,  0,  0,  0,  0,  0,
    0,  33, 34, 14, 0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  20, 33, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  43, 27, 9,  46, 0,  0,  0,  0,  0,  0,  0,  0,  4,
    38, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  46, 54, 46, 27, 0,  0,  0,  0,
    0,  0,  0,  0,  27, 22, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  34, 18,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  27, 7,  33, 0,  0,  0,  0,  0,  0,
    0,  0,  23, 33, 0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  22, 3,  37, 27, 0,
    0,  0,  0,  0,  0,  0,  0,  40, 4,  41, 33, 0,  0,  0,  0,  0,  0,  0,  0,
    16, 4,  41, 33, 0,  0,  0,  0,  0,  0,  0,  0,  12, 4,  10, 2,  0,  0,  0,
    0,  0,  0,  0,  0,  6,  37, 7,  27, 0,  0,  0,  0,  0,  0,  0,  0,  4,  2,
    10, 6,  0,  0,  0,  0,  0,  0,  0,  0,  14, 37, 22, 34, 0,  0,  0,  0,  0,
    0,  0,  0,  37, 27, 46, 17, 0,  0,  0,  0,  0,  0,  0,  0,  13, 17, 36, 37,
    0,  0,  0,  0,  0,  0,  0,  0,  45, 17, 23, 3,  0,  0,  0,  0,  0,  0,  0,
    0,  5,  24, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  36, 33, 13, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  42, 4,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  53,
    41, 14, 18, 26, 19, 12, 4,  6,  33, 27, 31, 45, 12, 19, 2,  0,  0,  0,  0,
    0,  0,  0,  0,  42, 17, 12, 6,  27, 0,  0,  0,  0,  0,  0,  0,  49, 36, 6,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  28, 33, 42, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  17, 32, 42, 28, 0,  0,  0,  0,  0,  0,  0,  0,  29, 2,  41, 6,  0,
    0,  0,  0,  0,  0,  0,  0,  4,  22, 10, 37, 0,  0,  0,  0,  0,  0,  0,  0,
    45, 37, 23, 27, 0,  0,  0,  0,  0,  0,  0,  0,  4,  37, 47, 27, 0,  0,  0,
    0,  0,  0,  0,  0,  30, 27, 46, 48, 0,  0,  0,  0,  0,  0,  0,  0,  0,  4,
    8,  10, 0,  0,  0,  0,  0,  0,  0,  0,  43, 4,  24, 0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  2,  8,  12, 0,  0,  0,  0,  0,  0,  0,  0,  14, 4,  10, 34,
    0,  0,  0,  0,  0,  0,  0,  0,  4,  37, 10, 17, 0,  0,  0,  0,  0,  0,  0,
    0,  42, 17, 28, 37, 0,  0,  0,  0,  0,  0,  0,  0,  0,  17, 8,  37, 0,  0,
    0,  0,  0,  0,  0,  0,  41, 40, 33, 34, 0,  0,  0,  0,  0,  0,  0,  0,  29,
    4,  43, 10, 0,  0,  0,  0,  0,  0,  0,  0,  36, 33, 6,  32, 0,  0,  0,  0,
    0,  0,  0,  0,  29, 17, 43, 37, 0,  0,  0,  0,  0,  0,  0,  0,  0,  37, 8,
    22, 0,  0,  0,  0,  0,  0,  0,  0,  51, 45, 6,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  34, 24, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  27, 8,  46, 0,
    0,  0,  0,  0,  0,  0,  0,  29, 33, 41, 0,  0,  0,  0,  0,  0,  0,  0,  0,
    33, 37, 27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  41, 16, 33, 34, 0,  0,  0,
    0,  0,  0,  0,  0,  4,  17, 12, 27, 0,  0,  0,  0,  0,  0,  0,  0,  45, 10,
    19, 4,  0,  0,  0,  0,  0,  0,  0,  0,  4,  17, 47, 3,  0,  0,  0,  0,  0,
    0,  0,  0,  20, 37, 38, 17, 0,  0,  0,  0,  0,  0,  0,  0,  33, 3,  27, 0,
    0,  0,  0,  0,  0,  0,  0,  0,  45, 37, 19, 17, 0,  0,  0,  0,  0,  0,  0,
    0,  43, 3,  9,  27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  13, 33, 0,  0,
    0,  0,  0,  0,  0,  0,  54, 27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,
    27, 16, 46, 0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  13, 33, 0,  0,  0,  0,
    0,  0,  0,  0,  29, 37, 42, 27, 0,  0,  0,  0,  0,  0,  0,  0,  33, 22, 46,
    27, 0,  0,  0,  0,  0,  0,  0,  0,  4,  27, 40, 46, 0,  0,  0,  0,  0,  0,
    0,  0,  11, 53, 27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  32, 30, 33, 0,  0,
    0,  0,  0,  0,  0,  0,  0,  28, 33, 4,  6,  0,  0,  0,  0,  0,  0,  0,  0,
    39, 17, 33, 37, 0,  0,  0,  0,  0,  0,  0,  0,  4,  3,  12, 33, 0,  0,  0,
    0,  0,  0,  0,  0,  4,  33, 10, 0,  0,  0,  0,  0,  0,  0,  0,  0,  20, 33,
    38, 0,  0,  0,  0,  0,  0,  0,  0,  0,  33, 39, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  12, 37, 22, 2,  0,  0,  0,  0,  0,  0,  0,  0,  14, 27, 5,  46,
    0,  0,  0,  0,  0,  0,  0,  0,  12, 17, 2,  37, 0,  0,  0,  0,  0,  0,  0,
    0,  33, 39, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  12, 27, 46, 2,  0,  0,
    0,  0,  0,  0,  0,  0,  45, 27, 23, 33, 0,  0,  0,  0,  0,  0,  0,  0,  41,
    17, 29, 37, 0,  0,  0,  0,  0,  0,  0,  0,  42, 33, 4,  2,  0,  0,  0,  0,
    0,  0,  0,  0,  33, 3,  54, 0,  0,  0,  0,  0,  0,  0,  0,  0,  40, 25, 29,
    6,  0,  0,  0,  0,  0,  0,  0,  0,  15, 17, 1,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  12, 3,  2,  27, 0,  0,  0,  0,  0,  0,  0,  0,  37, 34, 29, 12, 27,
    0,  0,  0,  0,  0,  0,  0,  37, 34, 14, 17, 0,  0,  0,  0,  0,  0,  0,  0,
    12, 33, 39, 2,  0,  0,  0,  0,  0,  0,  0,  0,  14, 34, 0,  4,  39, 0,  0,
    0,  0,  0,  0,  0,  12, 33, 47, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,
    8,  27, 0,  0,  0,  0,  0,  0,  0,  0,  6,  17, 7,  3,  0,  0,  0,  0,  0,
    0,  0,  0,  22, 27, 46, 37, 0,  0,  0,  0,  0,  0,  0,  0,  38, 16, 20, 4,
    0,  0,  0,  0,  0,  0,  0,  0,  14, 3,  28, 4,  33, 0,  0,  0,  0,  0,  0,
    0,  16, 7,  12, 6,  0,  0,  0,  0,  0,  0,  0,  0,  26, 37, 44, 22, 0,  0,
    0,  0,  0,  0,  0,  0,  33, 32, 43, 41, 0,  0,  0,  0,  0,  0,  0,  0,  14,
    4,  24, 10, 0,  0,  0,  0,  0,  0,  0,  0,  16, 7,  40, 7,  0,  0,  0,  0,
    0,  0,  0,  0,  45, 26, 44, 19, 0,  0,  0,  0,  0,  0,  0,  0,  5,  37, 28,
    4,  27, 0,  0,  0,  0,  0,  0,  0,  43, 27, 4,  6,  0,  0,  0,  0,  0,  0,
    0,  0,  33, 37, 46, 3,  0,  0,  0,  0,  0,  0,  0,  0,  16, 6,  40, 6,  0,
    0,  0,  0,  0,  0,  0,  0,  25, 17, 6,  27, 0,  0,  0,  0,  0,  0,  0,  0,
    2,  34, 14, 6,  0,  0,  0,  0,  0,  0,  0,  0,  17, 55, 15, 37, 0,  0,  0,
    0,  0,  0,  0,  0,  37, 27, 46, 17, 0,  0,  0,  0,  0,  0,  0,  0,  21, 54,
    21, 27, 0,  0,  0,  0,  0,  0,  0,  0,  28, 3,  40, 7,  0,  0,  0,  0,  0,
    0,  0,  0,  16, 46, 40, 46, 0,  0,  0,  0,  0,  0,  0,  0,  0,  33, 8,  39,
    0,  0,  0,  0,  0,  0,  0,  0,  29, 33, 43, 39, 0,  0,  0,  0,  0,  0,  0,
    0,  33, 22, 39, 37, 0,  0,  0,  0,  0,  0,  0,  0,  14, 27, 24, 46, 0,  0,
    0,  0,  0,  0,  0,  0,  5,  3,  28, 4,  0,  0,  0,  0,  0,  0,  0,  0,  49,
    3,  43, 28, 6,  0,  0,  0,  0,  0,  0,  0,  16, 17, 6,  46, 0,  0,  0,  0,
    0,  0,  0,  0,  43, 3,  33, 25, 0,  0,  0,  0,  0,  0,  0,  0,  24, 3,  41,
    2,  0,  0,  0,  0,  0,  0,  0,  0,  29, 17, 12, 2,  0,  0,  0,  0,  0,  0,
    0,  0,  26, 33, 19, 4,  0,  0,  0,  0,  0,  0,  0,  0,  20, 37, 12, 4,  27,
    0,  0,  0,  0,  0,  0,  0,  2,  6,  33, 0,  0,  0,  0,  0,  0,  0,  0,  0,
    26, 27, 44, 46, 0,  0,  0,  0,  0,  0,  0,  0,  16, 17, 6,  33, 27, 0,  0,
    0,  0,  0,  0,  0,  16, 39, 4,  33, 0,  0,  0,  0,  0,  0,  0,  0,  35, 50,
    37, 0,  0,  0,  0,  0,  0,  0,  0,  0,  45, 17, 49, 33, 0,  0,  0,  0,  0,
    0,  0,  0,  16, 27, 12, 33, 0,  0,  0,  0,  0,  0,  0,  0,  42, 27, 28, 46,
    0,  0,  0,  0,  0,  0,  0,  0,  14, 4,  5,  10, 0,  0,  0,  0,  0,  0,  0,
    0,  2,  6,  33, 0,  0,  0,  0,  0,  0,  0,  0,  0,  16, 3,  33, 2,  0,  0,
    0,  0,  0,  0,  0,  0,  16, 3,  6,  39, 0,  0,  0,  0,  0,  0,  0,  0,  1,
    35, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  23, 33, 8,  2,  0,  0,  0,  0,
    0,  0,  0,  0,  15, 41, 14, 18, 26, 19, 4,  10, 33, 31, 0,  0,  16, 21, 40,
    21, 0,  0,  0,  0,  0,  0,  0,  0,  6,  39, 12, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  2,  27, 6,  46, 0,  0,  0,  0,  0,  0,  0,  0,  29, 22, 41, 37, 0,
    0,  0,  0,  0,  0,  0,  0,  52, 36, 33, 0,  0,  0,  0,  0,  0,  0,  0,  0,
    40, 43, 39, 0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  39, 43, 33, 0,  0,  0,
    0,  0,  0,  0,  0,  5,  2,  14, 6,  0,  0,  0,  0,  0,  0,  0,  0,  14, 33,
    41, 4,  0,  0,  0,  0,  0,  0,  0,  0,  25, 3,  6,  33, 0,  0,  0,  0,  0,
    0,  0,  0,  0,  33, 43, 34, 0,  0,  0,  0,  0,  0,  0,  0,  18, 33, 14, 4,
    0,  0,  0,  0,  0,  0,  0,  0,  29, 3,  28, 33, 0,  0,  0,  0,  0,  0,  0,
    0,  26, 4,  44, 10, 0,  0,  0,  0,  0,  0,  0,  0,  24, 37, 41, 2,  27, 0,
    0,  0,  0,  0,  0,  0,  40, 6,  28, 0,  0,  0,  0,  0,  0,  0,  0,  0,  23,
    3,  49, 33, 0,  0,  0,  0,  0,  0,  0,  0,  6,  27, 7,  33, 0,  0,  0,  0,
    0,  0,  0,  0,  33, 48, 30, 0,  0,  0,  0,  0,  0,  0,  0,  0,  40, 37, 12,
    27, 0,  0,  0,  0,  0,  0,  0,  0,  40, 17, 7,  33, 0,  0,  0,  0,  0,  0,
    0,  0,  47, 3,  12, 27, 0,  0,  0,  0,  0,  0,  0,  0,  40, 17, 2,  27, 0,
    0,  0,  0,  0,  0,  0,  0,  40, 39, 4,  33, 0,  0,  0,  0,  0,  0,  0,  0,
    37, 27, 46, 17, 0,  0,  0,  0,  0,  0,  0,  0,  19, 27, 45, 46, 0,  0,  0,
    0,  0,  0,  0,  0,  33, 31, 14, 4,  0,  0,  0,  0,  0,  0,  0,  0,  40, 27,
    12, 33, 0,  0,  0,  0,  0,  0,  0,  0,  40, 3,  33, 2,  0,  0,  0,  0,  0,
    0,  0,  0,  42, 3,  28, 27, 0,  0,  0,  0,  0,  0,  0,  0,  18, 33, 41, 20,
    0,  0,  0,  0,  0,  0,  0,  0,  40, 33, 4,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  33, 27, 46, 54, 0,  0,  0,  0,  0,  0,  0,  0,  36, 43, 6,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  45, 39, 19, 33, 0,  0,  0,  0,  0,  0,  0,  0,  33,
    2,  12, 0,  0,  0,  0,  0,  0,  0,  0,  0,  45, 3,  8,  6,  0,  0,  0,  0,
    0,  0,  0,  0,  2,  3,  7,  33, 0,  0,  0,  0,  0,  0,  0,  0,  20, 22, 38,
    37, 0,  0,  0,  0,  0,  0,  0,  0,  27, 46, 3,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  37, 31, 14, 12, 27, 0,  0,  0,  0,  0,  0,  0,  10, 33, 4,  39, 0,
    0,  0,  0,  0,  0,  0,  0,  26, 33, 44, 39, 0,  0,  0,  0,  0,  0,  0,  0,
    14, 33, 5,  39, 0,  0,  0,  0,  0,  0,  0,  0,  43, 45, 56, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  56, 43, 57, 33, 0,  0,  0,  0,  0,  0,  0,  0};
  const int nuv[3684] = {
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    -1, 1,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  0, 0, 0, 0, 1, 1, 1, 0, 1, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 2,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0};
  if (i < 1) {
    // Return max num species per reaction
    nspec = 12;
  } else {
    if (i > 307) {
      nspec = -1;
    } else {
      nspec = ns[i - 1];
      for (int j = 0; j < nspec; ++j) {
        ki[j] = kiv[(i - 1) * 12 + j] + 1;
        nu[j] = nuv[(i - 1) * 12 + j];
      }
    }
  }
}

// Returns the progress rates of each reactions
// Given P, T, and mole fractions
void
CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real q_f[],
  amrex::Real q_r[])
{
  amrex::Real c[58]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 58; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  progressRateFR(q_f, q_r, c, T);

  // convert to chemkin units
  for (int id = 0; id < 307; ++id) {
    q_f[id] *= 1.0e-6;
    q_r[id] *= 1.0e-6;
  }
}

// compute the progress rate for each reaction
// USES progressRate : todo switch to GPU
void
progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);
  // compute the Gibbs free energy
  amrex::Real g_RT[58];
  gibbs(g_RT, T);

  amrex::Real sc_qss[1];
  comp_qfqr(q_f, q_r, sc, sc_qss, T, invT, logT);
}

// save atomic weights into array
void
atomicWeight(amrex::Real* awt)
{
  awt[0] = 12.011000; // C
  awt[1] = 1.008000;  // H
  awt[2] = 15.999000; // O
  awt[3] = 14.007000; // N
}

// get atomic weight for all elements
void
CKAWT(amrex::Real* awt)
{
  atomicWeight(awt);
}

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void
CKNCF(int* ncf)
{
  int kd = 4;
  // Zero ncf
  for (int id = 0; id < kd * 58; ++id) {
    ncf[id] = 0;
  }

  // C5H6
  ncf[0 * kd + 0] = 5; // C
  ncf[0 * kd + 1] = 6; // H

  // A2C11H21O2
  ncf[1 * kd + 0] = 11; // C
  ncf[1 * kd + 1] = 21; // H
  ncf[1 * kd + 2] = 2;  // O

  // HCO
  ncf[2 * kd + 0] = 1; // C
  ncf[2 * kd + 1] = 1; // H
  ncf[2 * kd + 2] = 1; // O

  // O
  ncf[3 * kd + 2] = 1; // O

  // CH3
  ncf[4 * kd + 0] = 1; // C
  ncf[4 * kd + 1] = 3; // H

  // CH3CCH2
  ncf[5 * kd + 0] = 3; // C
  ncf[5 * kd + 1] = 5; // H

  // CO
  ncf[6 * kd + 0] = 1; // C
  ncf[6 * kd + 2] = 1; // O

  // CO2
  ncf[7 * kd + 0] = 1; // C
  ncf[7 * kd + 2] = 2; // O

  // C5H5
  ncf[8 * kd + 0] = 5; // C
  ncf[8 * kd + 1] = 5; // H

  // C2H
  ncf[9 * kd + 0] = 2; // C
  ncf[9 * kd + 1] = 1; // H

  // CH4
  ncf[10 * kd + 0] = 1; // C
  ncf[10 * kd + 1] = 4; // H

  // A2C11H21O4
  ncf[11 * kd + 0] = 11; // C
  ncf[11 * kd + 1] = 21; // H
  ncf[11 * kd + 2] = 4;  // O

  // CH2O
  ncf[12 * kd + 0] = 1; // C
  ncf[12 * kd + 1] = 2; // H
  ncf[12 * kd + 2] = 1; // O

  // C5H5O(1,3)
  ncf[13 * kd + 0] = 5; // C
  ncf[13 * kd + 1] = 5; // H
  ncf[13 * kd + 2] = 1; // O

  // C3H6
  ncf[14 * kd + 0] = 3; // C
  ncf[14 * kd + 1] = 6; // H

  // A2C11H21
  ncf[15 * kd + 0] = 11; // C
  ncf[15 * kd + 1] = 21; // H

  // CH2*
  ncf[16 * kd + 0] = 1; // C
  ncf[16 * kd + 1] = 2; // H

  // O2
  ncf[17 * kd + 2] = 2; // O

  // C4H81
  ncf[18 * kd + 0] = 4; // C
  ncf[18 * kd + 1] = 8; // H

  // C6H6
  ncf[19 * kd + 0] = 6; // C
  ncf[19 * kd + 1] = 6; // H

  // C2H5
  ncf[20 * kd + 0] = 2; // C
  ncf[20 * kd + 1] = 5; // H

  // N2
  ncf[21 * kd + 3] = 2; // N

  // H2O2
  ncf[22 * kd + 1] = 2; // H
  ncf[22 * kd + 2] = 2; // O

  // C6H5O
  ncf[23 * kd + 0] = 6; // C
  ncf[23 * kd + 1] = 5; // H
  ncf[23 * kd + 2] = 1; // O

  // CH3CHCH
  ncf[24 * kd + 0] = 3; // C
  ncf[24 * kd + 1] = 5; // H

  // HCCO
  ncf[25 * kd + 0] = 2; // C
  ncf[25 * kd + 1] = 1; // H
  ncf[25 * kd + 2] = 1; // O

  // C6H5CH3
  ncf[26 * kd + 0] = 7; // C
  ncf[26 * kd + 1] = 8; // H

  // OH
  ncf[27 * kd + 1] = 1; // H
  ncf[27 * kd + 2] = 1; // O

  // CH2CO
  ncf[28 * kd + 0] = 2; // C
  ncf[28 * kd + 1] = 2; // H
  ncf[28 * kd + 2] = 1; // O

  // C2H3
  ncf[29 * kd + 0] = 2; // C
  ncf[29 * kd + 1] = 3; // H

  // C4H4
  ncf[30 * kd + 0] = 4; // C
  ncf[30 * kd + 1] = 4; // H

  // iC4H8
  ncf[31 * kd + 0] = 4; // C
  ncf[31 * kd + 1] = 8; // H

  // c-C4H5
  ncf[32 * kd + 0] = 4; // C
  ncf[32 * kd + 1] = 5; // H

  // H
  ncf[33 * kd + 1] = 1; // H

  // aC3H5
  ncf[34 * kd + 0] = 3; // C
  ncf[34 * kd + 1] = 5; // H

  // A2C11H20OOH
  ncf[35 * kd + 0] = 11; // C
  ncf[35 * kd + 1] = 21; // H
  ncf[35 * kd + 2] = 2;  // O

  // C5H4O
  ncf[36 * kd + 0] = 5; // C
  ncf[36 * kd + 1] = 4; // H
  ncf[36 * kd + 2] = 1; // O

  // HO2
  ncf[37 * kd + 1] = 1; // H
  ncf[37 * kd + 2] = 2; // O

  // C2H6
  ncf[38 * kd + 0] = 2; // C
  ncf[38 * kd + 1] = 6; // H

  // H2
  ncf[39 * kd + 1] = 2; // H

  // CH2
  ncf[40 * kd + 0] = 1; // C
  ncf[40 * kd + 1] = 2; // H

  // C2H4
  ncf[41 * kd + 0] = 2; // C
  ncf[41 * kd + 1] = 4; // H

  // CH2CHO
  ncf[42 * kd + 0] = 2; // C
  ncf[42 * kd + 1] = 3; // H
  ncf[42 * kd + 2] = 1; // O

  // C2H2
  ncf[43 * kd + 0] = 2; // C
  ncf[43 * kd + 1] = 2; // H

  // C6H5CH2
  ncf[44 * kd + 0] = 7; // C
  ncf[44 * kd + 1] = 7; // H

  // C6H5
  ncf[45 * kd + 0] = 6; // C
  ncf[45 * kd + 1] = 5; // H

  // H2O
  ncf[46 * kd + 1] = 2; // H
  ncf[46 * kd + 2] = 1; // O

  // CH3O
  ncf[47 * kd + 0] = 1; // C
  ncf[47 * kd + 1] = 3; // H
  ncf[47 * kd + 2] = 1; // O

  // iC4H3
  ncf[48 * kd + 0] = 4; // C
  ncf[48 * kd + 1] = 3; // H

  // C6H4O2
  ncf[49 * kd + 0] = 6; // C
  ncf[49 * kd + 1] = 4; // H
  ncf[49 * kd + 2] = 2; // O

  // A2C11H20
  ncf[50 * kd + 0] = 11; // C
  ncf[50 * kd + 1] = 20; // H

  // C6H5CO
  ncf[51 * kd + 0] = 7; // C
  ncf[51 * kd + 1] = 5; // H
  ncf[51 * kd + 2] = 1; // O

  // C5H5O(2,4)
  ncf[52 * kd + 0] = 5; // C
  ncf[52 * kd + 1] = 5; // H
  ncf[52 * kd + 2] = 1; // O

  // A2C11H20O3
  ncf[53 * kd + 0] = 11; // C
  ncf[53 * kd + 1] = 20; // H
  ncf[53 * kd + 2] = 3;  // O

  // OH*
  ncf[54 * kd + 1] = 1; // H
  ncf[54 * kd + 2] = 1; // O

  // POSF10325
  ncf[55 * kd + 0] = 11; // C
  ncf[55 * kd + 1] = 22; // H

  // A1C2H2
  ncf[56 * kd + 0] = 8; // C
  ncf[56 * kd + 1] = 7; // H

  // A2
  ncf[57 * kd + 0] = 10; // C
  ncf[57 * kd + 1] = 8;  // H
}

// Returns the vector of strings of element names
void
CKSYME_STR(amrex::Vector<std::string>& ename)
{
  ename.resize(4);
  ename[0] = "C";
  ename[1] = "H";
  ename[2] = "O";
  ename[3] = "N";
}

// Returns the vector of strings of species names
void
CKSYMS_STR(amrex::Vector<std::string>& kname)
{
  kname.resize(58);
  kname[0] = "C5H6";
  kname[1] = "A2C11H21O2";
  kname[2] = "HCO";
  kname[3] = "O";
  kname[4] = "CH3";
  kname[5] = "CH3CCH2";
  kname[6] = "CO";
  kname[7] = "CO2";
  kname[8] = "C5H5";
  kname[9] = "C2H";
  kname[10] = "CH4";
  kname[11] = "A2C11H21O4";
  kname[12] = "CH2O";
  kname[13] = "C5H5O(1,3)";
  kname[14] = "C3H6";
  kname[15] = "A2C11H21";
  kname[16] = "CH2*";
  kname[17] = "O2";
  kname[18] = "C4H81";
  kname[19] = "C6H6";
  kname[20] = "C2H5";
  kname[21] = "N2";
  kname[22] = "H2O2";
  kname[23] = "C6H5O";
  kname[24] = "CH3CHCH";
  kname[25] = "HCCO";
  kname[26] = "C6H5CH3";
  kname[27] = "OH";
  kname[28] = "CH2CO";
  kname[29] = "C2H3";
  kname[30] = "C4H4";
  kname[31] = "iC4H8";
  kname[32] = "c-C4H5";
  kname[33] = "H";
  kname[34] = "aC3H5";
  kname[35] = "A2C11H20OOH";
  kname[36] = "C5H4O";
  kname[37] = "HO2";
  kname[38] = "C2H6";
  kname[39] = "H2";
  kname[40] = "CH2";
  kname[41] = "C2H4";
  kname[42] = "CH2CHO";
  kname[43] = "C2H2";
  kname[44] = "C6H5CH2";
  kname[45] = "C6H5";
  kname[46] = "H2O";
  kname[47] = "CH3O";
  kname[48] = "iC4H3";
  kname[49] = "C6H4O2";
  kname[50] = "A2C11H20";
  kname[51] = "C6H5CO";
  kname[52] = "C5H5O(2,4)";
  kname[53] = "A2C11H20O3";
  kname[54] = "OH*";
  kname[55] = "POSF10325";
  kname[56] = "A1C2H2";
  kname[57] = "A2";
}

// compute the sparsity pattern of the chemistry Jacobian
void
SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 59; k++) {
    for (int l = 0; l < 59; l++) {
      if (Jac[59 * k + l] != 0.0) {
        nJdata_tmp = nJdata_tmp + 1;
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the system Jacobian
void
SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 59; k++) {
    for (int l = 0; l < 59; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[59 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the simplified (for preconditioning) system
// Jacobian
void
SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 59; k++) {
    for (int l = 0; l < 59; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[59 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  nJdata[0] = nJdata_tmp;
}

// compute the sparsity pattern of the chemistry Jacobian in CSC format -- base
// 0
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int nc = 0; nc < NCELLS; nc++) {
    int offset_row = nc * 59;
    int offset_col = nc * 59;
    for (int k = 0; k < 59; k++) {
      for (int l = 0; l < 59; l++) {
        if (Jac[59 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l + offset_row;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
      colPtrs[offset_col + (k + 1)] = nJdata_tmp;
    }
  }
}

// compute the sparsity pattern of the chemistry Jacobian in CSR format -- base
// 0
void
SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtrs[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 59;
      for (int l = 0; l < 59; l++) {
        for (int k = 0; k < 59; k++) {
          if (Jac[59 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 59;
      for (int l = 0; l < 59; l++) {
        for (int k = 0; k < 59; k++) {
          if (Jac[59 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the system Jacobian
// CSR format BASE is user choice
void
SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtr, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 59;
      for (int l = 0; l < 59; l++) {
        for (int k = 0; k < 59; k++) {
          if (k == l) {
            colVals[nJdata_tmp - 1] = l + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[59 * k + l] != 0.0) {
              colVals[nJdata_tmp - 1] = k + 1 + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 59;
      for (int l = 0; l < 59; l++) {
        for (int k = 0; k < 59; k++) {
          if (k == l) {
            colVals[nJdata_tmp] = l + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[59 * k + l] != 0.0) {
              colVals[nJdata_tmp] = k + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// on CPU BASE 0
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int k = 0; k < 59; k++) {
    for (int l = 0; l < 59; l++) {
      if (k == l) {
        rowVals[nJdata_tmp] = l;
        indx[nJdata_tmp] = 59 * k + l;
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[59 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l;
          indx[nJdata_tmp] = 59 * k + l;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
    colPtrs[k + 1] = nJdata_tmp;
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// CSR format BASE is under choice
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base)
{
  amrex::GpuArray<amrex::Real, 3481> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 58> conc = {0.0};
  for (int n = 0; n < 58; n++) {
    conc[n] = 1.0 / 58.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int l = 0; l < 59; l++) {
      for (int k = 0; k < 59; k++) {
        if (k == l) {
          colVals[nJdata_tmp - 1] = l + 1;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[59 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int l = 0; l < 59; l++) {
      for (int k = 0; k < 59; k++) {
        if (k == l) {
          colVals[nJdata_tmp] = l;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[59 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  }
}
